apply plugin: 'base'
apply plugin: 'idea'
apply plugin: 'java'

allprojects {

}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    task copyLicense {
        outputs.file new File("$buildDir/LICENSE")
        doLast {
            copy {
                from "../LICENSE"
                into "$buildDir"
            }
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.10'
    }
}

clean.doFirst {
    delete ".distributions"
}

def exportedProjects = [
        ":Heart",
        ":Shard",
        ":Common",
        ":Nerv"
]

task alljavadoc(type: Javadoc) {
    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    destinationDir = file("docs")
}

build.dependsOn alljavadoc

task bundle(dependsOn: build) {
    sleep(5 * 1000)
    copy {
        from(file('Heart/build/distributions'))
        into('.distributions')

        from(file('Shard/build/distributions'))
        into('.distributions')

        from(file('Nerv/build/distributions'))
        into('.distributions')
    }
}

//Common specific stuff
project(':Common') {
    dependencies {
        compile fileTree(dir: 'libs', include: ['*.jar', '*.py'])
    }
}

//Heart specific stuff
project(':Heart') {
    apply plugin: 'application'

    mainClassName = 'Heart.HeartDriver'

    dependencies {
        compile fileTree(dir: 'libs', include: ['*.jar', '*.py'])
        compile project(':Common')
        compile project(':MediaManager')
    }

    applicationDistribution.from(copyLicense) {
        into ""
    }
}

//Shard specific stuff
project(':Shard') {
    apply plugin: 'application'

    mainClassName = 'Shard.ShardDriver'

    dependencies {
        compile fileTree(dir: 'libs', include: ['*.jar'])
        compile fileTree(dir: 'libs/Sphinx', include: ['*.jar'])
        compile fileTree(dir: 'libs/TTS', include: ['*.jar'])
        compile project(':Common')
        compile project(':MediaManager')
    }

    applicationDistribution.from(copyLicense) {
        into ""
    }
}

//Nerv specific stuff
project(':Nerv') {
    apply plugin: 'application'

    mainClassName = 'Nerv.NervDriver'

    dependencies {
        compile project(':Common')
    }

    applicationDistribution.from(copyLicense) {
        into ""
    }
}

// MediaManager specific stuff
project(':MediaManager') {
    dependencies {
        compile project(':Common')
        compile fileTree(dir: 'libs', include: ['*.jar', '*.py'])
    }

    jar {
        // Keep jar clean:
        exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

        manifest {
            attributes 'Main-Class': 'MediaManager'
        }

    }
}